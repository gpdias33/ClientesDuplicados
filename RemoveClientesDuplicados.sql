--ATENÇÂO: ANTES DE INICIAR ESSE PROCESSO É IMPORTANTE VERIFICAR SE O BACKUP
--ESTÁ ATUALIZADO.

--1. SELECT PARA TRAZER REGISTROS DUPLICADOS
SELECT 
  CPF_CNPJ, 
  COUNT(*) AS TOTAL_DUPLICADOS
FROM BASE_PROD.CAD_CLIENTE_PJ PJ
WHERE (TRIM(PJ.CPF_CNPJ) <> '') AND (PJ.CPF_CNPJ IS NOT NULL)
GROUP BY CPF_CNPJ
HAVING COUNT(*) > 1

--2. CRIA A TABELA TEMPORARIA COM O REGISTRO DUPLICADOS: CAD_CLIENTE_PJ_DUPLICADO
DROP TABLE IF EXISTS BASE_PROD.CAD_CLIENTE_PJ_DUPLICADO;
SELECT 
  CPF_CNPJ, 
  COUNT(*) INTO CAD_CLIENTE_PJ_DUPLICADO
FROM BASE_PROD.CAD_CLIENTE_PJ PJ
WHERE (TRIM(PJ.CPF_CNPJ) <> '') AND (PJ.CPF_CNPJ IS NOT NULL)
GROUP BY CPF_CNPJ
HAVING COUNT(*) > 1;

--SELECT * FROM BASE_PROD.CAD_CLIENTE_PJ_DUPLICADO;
--3. CRIA A TABELA TEMPORARIA DE CLIENTES DUPLICADOS E COM INFORMAÇÕES ADICIONAIS: CAD_CLIENTES_DUPLICADOS
DROP TABLE IF EXISTS BASE_PROD.CAD_CLIENTES_DUPLICADOS;

CREATE TABLE BASE_PROD.CAD_CLIENTES_DUPLICADOS AS
SELECT 
  CLI.COD_CLIENTE,
  CLI.COD_CLIENTE_DESTINO,
  UPPER(CLI.CPJ_RAZAO_SOCIAL) AS CPJ_RAZAO_SOCIAL, 
  CLI.CPF_CNPJ, 
  CLI.DATA_ATUALIZACAO,
  FALSE AS REGISTRO_PRIMITIVO,
  0 AS CAD_AVC,
  0 AS CAD_BOLETO,
  0 AS CAD_CCE,
  0 AS CAD_CHQ,
  0 AS CAD_CNF,
  0 AS CAD_CON,
  0 AS CAD_CONTATO_FATURA,
  0 AS CAD_CLIENTE_PF,
  0 AS CAD_CLIENTE_PF_EMP_SPC,
  0 AS CAD_CRC,
  0 AS CAD_CRE,
  0 AS CAD_CRE_FATURA,
  0 AS CAD_CRT,
  0 AS CAD_DCL,
  0 AS CAD_ENDERECOS_CLIENTE,
  0 AS CAD_FATURA,
  0 AS CAD_FRE,
  0 AS CAD_HIS,
  0 AS CAD_IAC,
  0 AS CAD_INP,
  0 AS CAD_LCD,
  0 AS CAD_LID,
  0 AS CAD_MCA,
  0 AS CAD_NFC,
  0 AS CAD_PCN,
  0 AS CAD_PCR,
  0 AS CAD_PEDIDO_E_COMMERCE,
  0 AS CAD_PEDIDO_REPRESENTANTE,
  0 AS CAD_PEDIDOS_REP_FOR,
  0 AS CAD_PEDIDOS_REP_FOR_DIV,
  0 AS CAD_PEDIDOS_REP_FOR_ITENS,
  0 AS CAD_PEV,
  0 AS CAD_PEV_ONLINE,
  0 AS CAD_POC,
  0 AS CAD_PONTOS_NF,
  0 AS CAD_SMS,
  0 AS CAD_SOLICITACAO_ITEM,
  0 AS CAD_SPC,
  0 AS CAD_TCL,
  0 AS CAD_VENDA_CONSIGNADA
FROM BASE_PROD.CAD_CLIENTE_PJ CLI JOIN BASE_PROD.CAD_CLIENTE_PJ_DUPLICADO DUP ON (CLI.CPF_CNPJ = DUP.CPF_CNPJ)
ORDER BY CLI.CPF_CNPJ, CLI.DATA_ATUALIZACAO;

CREATE INDEX IDX_CPJ_CDCLI_DUP ON BASE_PROD.CAD_CLIENTES_DUPLICADOS USING BTREE (COD_CLIENTE);
CREATE INDEX IDX_CPJ_CPF_DUP ON BASE_PROD.CAD_CLIENTES_DUPLICADOS USING BTREE (CPF_CNPJ);

SELECT * FROM BASE_PROD.CAD_CLIENTES_DUPLICADOS;

--4. PROCEDURE PARA ATUALIZAR O REGISTRO PRIMITIVO
--CREATE PROCEDURE BASE_PROD.ATU_REG_PRIVTO_CLIENTE_DUP()
--LANGUAGE PLPGSQL
--AS $PROCEDURE$
DO $$
DECLARE
  -- VARIABLE DECLARATION
  CODIGO_CLIENTE INT;
  PROGRESSO      INT;
  CPF_CNPJ_CLIENTE VARCHAR(14);
  REC_CLIENTE_DUPLICADO   RECORD;
  REC_CLIENTE_PRIMITIVO   RECORD;

  CUR_CLIENTES_DUPLICADOS CURSOR FOR 
  SELECT * FROM BASE_PROD.CAD_CLIENTES_DUPLICADOS CLI ORDER BY CLI.CPF_CNPJ, CLI.DATA_ATUALIZACAO; 
 
  CUR_REGISTRO_PRIMITIVO CURSOR (CPF_CNPJ VARCHAR(14)) FOR 
  SELECT MIN(CD.COD_CLIENTE) AS COD_CLIENTE FROM BASE_PROD.CAD_CLIENTES_DUPLICADOS CD
  WHERE CD.CPF_CNPJ = CPF_CNPJ;

 BEGIN
  PROGRESSO=0;
  OPEN CUR_CLIENTES_DUPLICADOS;
  LOOP
   
    FETCH CUR_CLIENTES_DUPLICADOS INTO REC_CLIENTE_DUPLICADO; -- FETCH ROW INTO THE FILM
    EXIT WHEN NOT FOUND;                                      -- EXIT WHEN NO MORE ROW TO FETCH
    CPF_CNPJ_CLIENTE := REC_CLIENTE_DUPLICADO.CPF_CNPJ;
    OPEN CUR_REGISTRO_PRIMITIVO(CPF_CNPJ := CPF_CNPJ_CLIENTE);
    FETCH CUR_REGISTRO_PRIMITIVO INTO REC_CLIENTE_PRIMITIVO;
    CODIGO_CLIENTE := REC_CLIENTE_PRIMITIVO.COD_CLIENTE;
    UPDATE BASE_PROD.CAD_CLIENTES_DUPLICADOS SET REGISTRO_PRIMITIVO = TRUE 
    WHERE COD_CLIENTE = CODIGO_CLIENTE;
    CLOSE CUR_REGISTRO_PRIMITIVO;
    PROGRESSO=PROGRESSO+1;
    RAISE NOTICE 'TOTAL TUALIZADO: % CLIENTE: % CPF: % NOME: % ', PROGRESSO, CODIGO_CLIENTE, CPF_CNPJ_CLIENTE, REC_CLIENTE_DUPLICADO.CPJ_RAZAO_SOCIAL;
  END LOOP;
   
  CLOSE CUR_CLIENTES_DUPLICADOS; -- CLOSE THE CURSOR
 
END $$;
--LANGUAGE PLPGSQL;

--5. CONFERE OS REGISTROS ATUALIZADOS.
SELECT 
  COD_CLIENTE, COD_CLIENTE_DESTINO, CPJ_RAZAO_SOCIAL, CPF_CNPJ, DATA_ATUALIZACAO, 
  REGISTRO_PRIMITIVO, CAD_AVC, CAD_BOLETO, CAD_CCE, CAD_CHQ, CAD_CNF, CAD_CON, 
  CAD_CONTATO_FATURA, CAD_CLIENTE_PF, CAD_CLIENTE_PF_EMP_SPC, CAD_CRC, CAD_CRE, CAD_CRE_FATURA, 
  CAD_CRT, CAD_DCL, CAD_ENDERECOS_CLIENTE, CAD_FATURA, CAD_FRE, CAD_HIS, CAD_IAC, 
  CAD_INP, CAD_LCD, CAD_LID, CAD_MCA, CAD_NFC, CAD_PCN, CAD_PCR, CAD_PEDIDO_E_COMMERCE, 
  CAD_PEDIDO_REPRESENTANTE, CAD_PEDIDOS_REP_FOR, CAD_PEDIDOS_REP_FOR_DIV, 
  CAD_PEDIDOS_REP_FOR_ITENS, CAD_PEV, CAD_PEV_ONLINE, CAD_POC, CAD_PONTOS_NF, CAD_SMS, 
  CAD_SOLICITACAO_ITEM, CAD_SPC, CAD_TCL, CAD_VENDA_CONSIGNADA
FROM BASE_PROD.CAD_CLIENTES_DUPLICADOS
--WHERE REGISTRO_PRIMITIVO = TRUE
ORDER BY CPF_CNPJ, COD_CLIENTE;


--6. ATUALIZA OS CAMPOS DOS NOMES DAS TABELAS COM A QTDE DE REGISTROS MOVIMENTADOS NESSAS TABELAS.
DO $$
DECLARE
  -- VARIABLE DECLARATION
  VLCODCLIENTE  INT;
  PROGRESSO     INT;
  VLPROGRESSO   INT;
  VLQTDREGISTRO BIGINT;
  VLCPFCNPJ     VARCHAR(14);
  VLNOMETABELA  VARCHAR(50);
  VLNOMECAMPO   VARCHAR(24);
  REC_CLIENTE_DUPLICADO   RECORD;
  REC_CAMPO_NOME_TABELA   RECORD;
  REC_QTD_REGISTRO        RECORD;

  CUR_CLIENTES_DUPLICADOS CURSOR FOR 
  SELECT * FROM BASE_PROD.CAD_CLIENTES_DUPLICADOS CLI ORDER BY CLI.CPF_CNPJ, CLI.DATA_ATUALIZACAO;
 
  CUR_CAMPOS_NOMES_TABELAS CURSOR FOR 
  SELECT COLUMN_NAME AS NOMETABELA FROM INFORMATION_SCHEMA.COLUMNS
  WHERE TABLE_NAME = 'CAD_CLIENTES_DUPLICADOS'
  AND  COLUMN_NAME LIKE 'CAD_%'
  AND  COLUMN_NAME NOT IN ('CAD_CLIENTE_PJ','CAD_CNF')  ORDER BY COLUMN_NAME;
 
 BEGIN
  PROGRESSO=0;
  OPEN CUR_CLIENTES_DUPLICADOS;
  LOOP
   
    FETCH CUR_CLIENTES_DUPLICADOS INTO REC_CLIENTE_DUPLICADO; -- FETCH ROW INTO THE FILM
    EXIT WHEN NOT FOUND;                                      -- EXIT WHEN NO MORE ROW TO FETCH
    VLCODCLIENTE := REC_CLIENTE_DUPLICADO.COD_CLIENTE;
    OPEN CUR_CAMPOS_NOMES_TABELAS;
    LOOP
      VLQTDREGISTRO=0;
	  FETCH CUR_CAMPOS_NOMES_TABELAS INTO REC_CAMPO_NOME_TABELA;
      EXIT WHEN NOT FOUND;
      VLNOMETABELA=TRIM(REC_CAMPO_NOME_TABELA.NOMETABELA);
      VLNOMECAMPO='COD_CLIENTE';
      --IF VLNOMETABELA = 'CAD_CNF' THEN
      --  VLNOMECAMPO='NFI_CDPORA006::INTEGER';
      --END IF;
      EXECUTE FORMAT('SELECT COUNT(*) AS QTD_REGISTRO FROM %S WHERE %S = %S;', VLNOMETABELA, VLNOMECAMPO, VLCODCLIENTE) INTO VLQTDREGISTRO;
      IF VLQTDREGISTRO > 0 THEN
        EXECUTE FORMAT('UPDATE CAD_CLIENTES_DUPLICADOS SET %S = %S WHERE COD_CLIENTE = %S;', VLNOMETABELA, VLQTDREGISTRO, VLCODCLIENTE);
      END IF;
    END LOOP;
   
    CLOSE CUR_CAMPOS_NOMES_TABELAS;
    PROGRESSO=PROGRESSO+1;
    RAISE NOTICE 'TOTAL ATUALIZADO: %', PROGRESSO;
  END LOOP;
   
  CLOSE CUR_CLIENTES_DUPLICADOS; -- CLOSE THE CURSOR
 
END $$;
--LANGUAGE PLPGSQL;

--7. (OPCIONAL) CONFERE OS REGISTROS ATUALIZADOS 
SELECT COD_CLIENTE, CPJ_RAZAO_SOCIAL, CPF_CNPJ, DATA_ATUALIZACAO, 
       REGISTRO_PRIMITIVO, CAD_AVC, CAD_BOLETO, CAD_CCE, CAD_CHQ, CAD_CNF, 
       CAD_CON, CAD_CONTATO_FATURA, CAD_CLIENTE_PF, CAD_CLIENTE_PF_EMP_SPC, CAD_CRC, 
       CAD_CRE, CAD_CRE_FATURA, CAD_CRT, CAD_DCL, CAD_ENDERECOS_CLIENTE, 
       CAD_FATURA, CAD_FRE, CAD_HIS, CAD_IAC, CAD_INP, CAD_LCD, CAD_LID, 
       CAD_MCA, CAD_NFC, CAD_PCN, CAD_PCR, CAD_PEDIDO_E_COMMERCE, CAD_PEDIDO_REPRESENTANTE, 
       CAD_PEDIDOS_REP_FOR, CAD_PEDIDOS_REP_FOR_DIV, CAD_PEDIDOS_REP_FOR_ITENS, 
       CAD_PEV, CAD_PEV_ONLINE, CAD_POC, CAD_PONTOS_NF, CAD_SMS, CAD_SOLICITACAO_ITEM, 
       CAD_SPC, CAD_TCL, CAD_VENDA_CONSIGNADA
FROM BASE_PROD.CAD_CLIENTES_DUPLICADOS
WHERE CAD_PONTOS_NF > 0 
AND  REGISTRO_PRIMITIVO = FALSE
ORDER BY CPF_CNPJ, COD_CLIENTE;


--8. VERIFICA AS TRIGGERS E FOREING KEYS (RESOLVIDO NO ITEM 9)
/*
 A IDÉIA É SUBSTRITUIR TODOS OS CÓDIGO DUPLICADOS PELO CÓDIGOS PRIMITIVOS EM TODAS AS TABELAS 
 QUE SE RELACIONAM COM CAD_CLIENTE_PJ. POR ESSE MOTIVO, É NECESSÁRIO DESATIVAR AS FKS.
 
 OUTRA OBSERVAÇÃO: É POSSÍVEL QUE HAJA TAMBÉM ALGUMA TRIGGER QUE ATUALIZE O LIMITE DE CRÉDITO OU OUTRA INFORMAÇÃO. 
 OUTRA OBSERVAÇÃO: É NECESSÁRIO CONSIDERAR QUE O REGISTRO PRIMITIVO PODE ESTAR DESATUALIZADO EM RELAÇÃO A UM DUPLICADO.
 */

--9. ATUALIZA AS TABELAS QUE POSSUEM O CÓDIGO DO CLIENTE, SUBSTITUINDO O DUPLICADO PELO PRIMITIVO.
DO $$
DECLARE
  -- VARIABLE DECLARATION
  VLCODCLIENTEPRIMITIVO  INT;
  VLCODCLIENTEDUPLICADO  INT;
  PROGRESSO     INT;
  VLPROGRESSO   INT;
  VLQTDREGISTRO BIGINT;
  VLCPFCNPJ     VARCHAR(14);
  VLNOMETABELA  VARCHAR(50);
  VLNOMECAMPO   VARCHAR(24);
  REC_CLIENTE_REGISTRO_PRIMITIVO   RECORD;
  REC_CLIENTE_DUPLICADO   RECORD;
  REC_CAMPO_NOME_TABELA   RECORD;
  REC_QTD_REGISTRO        RECORD;
  VLMAXDLC INT;
  VLNOMECAMPOID VARCHAR(24);
 
  CUR_CLIENTE_REGRISTRO_PRIMITIVO CURSOR FOR 
  SELECT CLI.COD_CLIENTE, CPF_CNPJ, CLI.REGISTRO_PRIMITIVO 
  FROM BASE_PROD.CAD_CLIENTES_DUPLICADOS CLI
  WHERE CLI.REGISTRO_PRIMITIVO = TRUE
  --AND   CLI.CPF_CNPJ = '07779621871'
  ORDER BY CLI.COD_CLIENTE;
 
  CUR_CLIENTE_DUPLICADO CURSOR (PCPF VARCHAR(14)) FOR 
  SELECT * FROM BASE_PROD.CAD_CLIENTES_DUPLICADOS CLI
  WHERE  CLI.REGISTRO_PRIMITIVO = FALSE
  AND    CLI.CPF_CNPJ = PCPF
  ORDER  BY CLI.CPF_CNPJ, CLI.COD_CLIENTE;
 
  CUR_CAMPOS_NOMES_TABELAS CURSOR FOR 
  SELECT COLUMN_NAME AS NOMETABELA FROM INFORMATION_SCHEMA.COLUMNS
  WHERE TABLE_NAME = 'CAD_CLIENTES_DUPLICADOS'
  AND  COLUMN_NAME LIKE 'CAD_%'
  AND  COLUMN_NAME NOT IN ('CAD_CLIENTE_PJ','CAD_CNF', 'CAD_CLIENTE_PF', 'CAD_ENDERECOS_CLIENTE', 'CAD_CRC', 'CAD_DCL')  ORDER BY COLUMN_NAME;

 BEGIN
   PROGRESSO=0;
   OPEN CUR_CLIENTE_REGRISTRO_PRIMITIVO;
   LOOP
     VLCODCLIENTEPRIMITIVO=0;
     VLCPFCNPJ='';
     FETCH CUR_CLIENTE_REGRISTRO_PRIMITIVO INTO REC_CLIENTE_REGISTRO_PRIMITIVO; -- FETCH DA LINHA DO REGISTRO PRIMITIVO.
     EXIT WHEN NOT FOUND;                                                       -- EXIT WHEN NO MORE ROW TO FETCH
     VLCODCLIENTEPRIMITIVO=REC_CLIENTE_REGISTRO_PRIMITIVO.COD_CLIENTE;
     VLCPFCNPJ=REC_CLIENTE_REGISTRO_PRIMITIVO.CPF_CNPJ;
     OPEN CUR_CLIENTE_DUPLICADO(PCPF:=VLCPFCNPJ);
     LOOP
       FETCH CUR_CLIENTE_DUPLICADO INTO REC_CLIENTE_DUPLICADO; -- FETCH DA LINHA DO REGISTRO PRIMITIVO.
       EXIT WHEN NOT FOUND;                                    -- EXIT WHEN NO MORE ROW TO FETCH
       VLCODCLIENTEDUPLICADO=REC_CLIENTE_DUPLICADO.COD_CLIENTE;
       OPEN CUR_CAMPOS_NOMES_TABELAS;
       LOOP
         VLQTDREGISTRO=0;
         VLMAXDLC=0;
         FETCH CUR_CAMPOS_NOMES_TABELAS INTO REC_CAMPO_NOME_TABELA;
         EXIT WHEN NOT FOUND;
         VLNOMETABELA=TRIM(REC_CAMPO_NOME_TABELA.NOMETABELA);
         VLNOMECAMPO='COD_CLIENTE';
         IF VLNOMETABELA = 'CAD_CNF' THEN
           VLNOMECAMPO='NFI_CDPORA006::INTEGER';
         END IF;
         EXECUTE FORMAT('SELECT COUNT(*) AS QTD_REGISTRO FROM %S WHERE %S = %S;', VLNOMETABELA, VLNOMECAMPO, VLCODCLIENTEDUPLICADO) INTO VLQTDREGISTRO;
         IF VLQTDREGISTRO > 0 THEN
           IF VLNOMETABELA = 'CAD_DCL' THEN  --CASO ESPECIFICO DE CHAVE COMPOSTA COM CODIGO_CLIENTE+SEQUENCIAL
             VLNOMECAMPOID='DCL_CDDEPI002';
             EXECUTE FORMAT('SELECT MAX(DCL_CDDEPI002) AS MAX_ID FROM %S WHERE %S = %S;', VLNOMETABELA, VLNOMECAMPO, VLCODCLIENTEPRIMITIVO) INTO VLMAXDLC;
             IF VLMAXDLC > 0 THEN
               VLMAXDLC = VLMAXDLC + 1;
               EXECUTE FORMAT('UPDATE %S SET %S = %S WHERE %S = %S;', VLNOMETABELA, VLNOMECAMPOID, VLMAXDLC, VLNOMECAMPO, VLCODCLIENTEDUPLICADO);
             END IF;
           END IF;
           EXECUTE FORMAT('ALTER TABLE %S DISABLE TRIGGER ALL;', VLNOMETABELA);
           EXECUTE FORMAT('UPDATE %S SET %S = %S WHERE %S = %S;', VLNOMETABELA, VLNOMECAMPO, VLCODCLIENTEPRIMITIVO, VLNOMECAMPO, VLCODCLIENTEDUPLICADO);
           --EXECUTE FORMAT('UPDATE CAD_MCA SET CPJ_CDCLI001 = VLCLIENTEPRIMITIVO WHERE CPJ_CDCLI001 = VLCLIENTEDUPLICADO;', VLNOMETABELA, VLNOMECAMPO, VLCODCLIENTE, VLNOMECAMPO, VLCODCLIENTEDUPLICADO);
           EXECUTE FORMAT('ALTER TABLE %S ENABLE TRIGGER ALL;', VLNOMETABELA);
         END IF;
       END LOOP;
       CLOSE CUR_CAMPOS_NOMES_TABELAS;
     END LOOP;
   
     CLOSE CUR_CLIENTE_DUPLICADO; -- CLOSE THE CURSOR
     PROGRESSO=PROGRESSO+1;
     RAISE NOTICE 'TOTAL ATUALIZADO: %', PROGRESSO;
   END LOOP;
   
   CLOSE CUR_CLIENTE_REGRISTRO_PRIMITIVO; -- CLOSE THE CURSOR
 
END $$;
--LANGUAGE PLPGSQL;

--10. CRIA NOVAMENTE A TABELA COM REGISTROS DUPLICADOS: CAD_CLIENTES_DUPLICADOS_CORRIGIDOS
DROP TABLE IF EXISTS BASE_PROD.CAD_CLIENTES_DUPLICADOS_CORRIGIDOS;
CREATE TABLE BASE_PROD.CAD_CLIENTES_DUPLICADOS_CORRIGIDOS AS
SELECT 
  CLI.COD_CLIENTE,
  CLI.COD_CLIENTE_DESTINO,
  UPPER(CLI.CPJ_RAZAO_SOCIAL) AS CPJ_RAZAO_SOCIAL, 
  CLI.CPF_CNPJ, 
  CLI.DATA_ATUALIZACAO,
  FALSE AS REGISTRO_PRIMITIVO,
  0 AS CAD_AVC,
  0 AS CAD_BOLETO,
  0 AS CAD_CCE,
  0 AS CAD_CHQ,
  0 AS CAD_CNF,
  0 AS CAD_CON,
  0 AS CAD_CONTATO_FATURA,
  0 AS CAD_CLIENTE_PF,
  0 AS CAD_CLIENTE_PF_EMP_SPC,
  0 AS CAD_CRC,
  0 AS CAD_CRE,
  0 AS CAD_CRE_FATURA,
  0 AS CAD_CRT,
  0 AS CAD_DCL,
  0 AS CAD_ENDERECOS_CLIENTE,
  0 AS CAD_FATURA,
  0 AS CAD_FRE,
  0 AS CAD_HIS,
  0 AS CAD_IAC,
  0 AS CAD_INP,
  0 AS CAD_LCD,
  0 AS CAD_LID,
  0 AS CAD_MCA,
  0 AS CAD_NFC,
  0 AS CAD_PCN,
  0 AS CAD_PCR,
  0 AS CAD_PEDIDO_E_COMMERCE,
  0 AS CAD_PEDIDO_REPRESENTANTE,
  0 AS CAD_PEDIDOS_REP_FOR,
  0 AS CAD_PEDIDOS_REP_FOR_DIV,
  0 AS CAD_PEDIDOS_REP_FOR_ITENS,
  0 AS CAD_PEV,
  0 AS CAD_PEV_ONLINE,
  0 AS CAD_POC,
  0 AS CAD_PONTOS_NF,
  0 AS CAD_SMS,
  0 AS CAD_SOLICITACAO_ITEM,
  0 AS CAD_SPC,
  0 AS CAD_TCL,
  0 AS CAD_VENDA_CONSIGNADA
FROM CAD_CLIENTE_PJ CLI JOIN CAD_CLIENTE_PJ_DUPLICADO DUP ON (CLI.CPF_CNPJ = DUP.CPF_CNPJ)
ORDER BY CLI.CPF_CNPJ, CLI.DATA_ATUALIZACAO;
CREATE INDEX IDX_CPJ_CDCLI_DUPCORR ON BASE_PROD.CAD_CLIENTES_DUPLICADOS_CORRIGIDOS USING BTREE (COD_CLIENTE);
CREATE INDEX IDX_CPJ_CPF_DUPCORR ON BASE_PROD.CAD_CLIENTES_DUPLICADOS_CORRIGIDOS USING BTREE (CPF_CNPJ);

--11. PROCEDURE ATUALIZA REGISTRO PRIMITIVO NA CAD_CLIENTES_DUPLICADOS_CORRIGIDOS
DO $$
DECLARE
  -- VARIABLE DECLARATION
  CODIGO_CLIENTE INT;
  PROGRESSO      INT;
  CPF_CNPJ_CLIENTE VARCHAR(14);
  REC_CLIENTE_DUPLICADO   RECORD;
  REC_CLIENTE_PRIMITIVO   RECORD;

  CUR_CLIENTES_DUPLICADOS CURSOR FOR 
  SELECT * FROM BASE_PROD.CAD_CLIENTES_DUPLICADOS_CORRIGIDOS CLI ORDER BY CLI.CPF_CNPJ, CLI.DATA_ATUALIZACAO; 
 
  CUR_REGISTRO_PRIMITIVO CURSOR (CPF_CNPJ VARCHAR(14)) FOR 
  SELECT MIN(CD.COD_CLIENTE) AS COD_CLIENTE FROM BASE_PROD.CAD_CLIENTES_DUPLICADOS_CORRIGIDOS CD
  WHERE CD.CPF_CNPJ = CPF_CNPJ;

 BEGIN
  PROGRESSO=0;
  OPEN CUR_CLIENTES_DUPLICADOS;
  LOOP
   
    FETCH CUR_CLIENTES_DUPLICADOS INTO REC_CLIENTE_DUPLICADO; -- FETCH ROW INTO THE FILM
    EXIT WHEN NOT FOUND;                                      -- EXIT WHEN NO MORE ROW TO FETCH
    CPF_CNPJ_CLIENTE := REC_CLIENTE_DUPLICADO.CPF_CNPJ;
    OPEN CUR_REGISTRO_PRIMITIVO(CPF_CNPJ := CPF_CNPJ_CLIENTE);
    FETCH CUR_REGISTRO_PRIMITIVO INTO REC_CLIENTE_PRIMITIVO;
    CODIGO_CLIENTE := REC_CLIENTE_PRIMITIVO.COD_CLIENTE;
    UPDATE BASE_PROD.CAD_CLIENTES_DUPLICADOS_CORRIGIDOS SET REGISTRO_PRIMITIVO = TRUE 
    WHERE COD_CLIENTE = CODIGO_CLIENTE;
    CLOSE CUR_REGISTRO_PRIMITIVO;
    PROGRESSO=PROGRESSO+1;
    RAISE NOTICE 'TOTAL TUALIZADO: % CLIENTE: % CPF: % NOME: % ', PROGRESSO, CODIGO_CLIENTE, CPF_CNPJ_CLIENTE, REC_CLIENTE_DUPLICADO.CPJ_RAZAO_SOCIAL;
  END LOOP;
   
  CLOSE CUR_CLIENTES_DUPLICADOS; -- CLOSE THE CURSOR
 
END $$;
--LANGUAGE PLPGSQL;


--12. ATUALIZA OS REGISTROS DA TABELA CAD_CLIENTES_DUPLICADOS_CORRIGIDOS.
    --ATUALIZA OS CAMPOS DOS NOMES DAS TABELAS COM A QTDE DE REGISTROS QUE TEM PRA ATUALIZAR.
    --NESSE CASO, TODAS AS COLUNAS COM NOMES DE TABELAS ERAM PR ESTAR ZERADAS.
DO $$
DECLARE
  -- VARIABLE DECLARATION
  VLCODCLIENTE  INT;
  PROGRESSO     INT;
  VLPROGRESSO   INT;
  VLQTDREGISTRO BIGINT;
  VLCPFCNPJ     VARCHAR(14);
  VLNOMETABELA  VARCHAR(50);
  VLNOMECAMPO   VARCHAR(24);
  REC_CLIENTE_DUPLICADO   RECORD;
  REC_CAMPO_NOME_TABELA   RECORD;
  REC_QTD_REGISTRO        RECORD;

  CUR_CLIENTES_DUPLICADOS CURSOR FOR 
  SELECT * FROM BASE_PROD.CAD_CLIENTES_DUPLICADOS_CORRIGIDOS CLI ORDER BY CLI.CPF_CNPJ, CLI.DATA_ATUALIZACAO;
 
  CUR_CAMPOS_NOMES_TABELAS CURSOR FOR 
  SELECT COLUMN_NAME AS NOMETABELA FROM INFORMATION_SCHEMA.COLUMNS
  WHERE TABLE_NAME = 'CAD_CLIENTES_DUPLICADOS_CORRIGIDOS'
  AND  COLUMN_NAME LIKE 'CAD_%'
  AND  COLUMN_NAME NOT IN ('CAD_CLIENTE_PJ','CAD_CNF')  ORDER BY COLUMN_NAME;
 
 BEGIN
  PROGRESSO=0;
  OPEN CUR_CLIENTES_DUPLICADOS;
  LOOP
   
    FETCH CUR_CLIENTES_DUPLICADOS INTO REC_CLIENTE_DUPLICADO; -- FETCH ROW INTO THE FILM
    EXIT WHEN NOT FOUND;                                      -- EXIT WHEN NO MORE ROW TO FETCH
    VLCODCLIENTE := REC_CLIENTE_DUPLICADO.COD_CLIENTE;
    OPEN CUR_CAMPOS_NOMES_TABELAS;
    LOOP
      VLQTDREGISTRO=0;
	  FETCH CUR_CAMPOS_NOMES_TABELAS INTO REC_CAMPO_NOME_TABELA;
      EXIT WHEN NOT FOUND;
      VLNOMETABELA=TRIM(REC_CAMPO_NOME_TABELA.NOMETABELA);
      VLNOMECAMPO='COD_CLIENTE';
      --IF VLNOMETABELA = 'CAD_CNF' THEN
      --  VLNOMECAMPO='NFI_CDPORA006::INTEGER';
      --END IF;
      EXECUTE FORMAT('SELECT COUNT(*) AS QTD_REGISTRO FROM %S WHERE %S = %S;', VLNOMETABELA, VLNOMECAMPO, VLCODCLIENTE) INTO VLQTDREGISTRO;
      IF VLQTDREGISTRO > 0 THEN
        EXECUTE FORMAT('UPDATE CAD_CLIENTES_DUPLICADOS_CORRIGIDOS SET %S = %S WHERE COD_CLIENTE = %S;', VLNOMETABELA, VLQTDREGISTRO, VLCODCLIENTE);
      END IF;
      RAISE NOTICE 'TOTAL ATUALIZADO EM %: % REGISTROS', VLNOMETABELA, VLQTDREGISTRO;
    END LOOP;
   
    CLOSE CUR_CAMPOS_NOMES_TABELAS;
    PROGRESSO=PROGRESSO+1;
    RAISE NOTICE 'TOTAL ATUALIZADO: %', PROGRESSO;
  END LOOP;
   
  CLOSE CUR_CLIENTES_DUPLICADOS; -- CLOSE THE CURSOR
 
END $$;
--LANGUAGE PLPGSQL;


--13. CRIA UMA TABELA DE LOG COM AS TEBELAS E REGISTROS ALTERADOS.
DROP TABLE IF EXISTS BASE_PROD.CAD_LOG_CLIENTES_DUPLICADOS;
CREATE TABLE BASE_PROD.CAD_LOG_CLIENTES_DUPLICADOS (
	NOME_TABELA VARCHAR NULL,
	NOME_COLUNA VARCHAR NULL,
	VALOR_NOVO VARCHAR NULL,
	VALOR_ANTIGO VARCHAR NULL
);
--SELECT * FROM BASE_PROD.CAD_LOG_CLIENTES_DUPLICADOS


--14. ATUALIZA AS TABELAS QUE RECEBEM O CAMPO %_CDPODA006
  --  QUE SÃO: CAD_NFI, CAD_PACOTE, CAD_PESQUISACLIENTES 
  --  SUBSTITUINDO O DUPLICADO PELO PRIMITIVO.
DO $$
DECLARE
  -- VARIABLE DECLARATION
  VLCODCLIENTEPRIMITIVO  VARCHAR(10);
  VLCODCLIENTEDUPLICADO  VARCHAR(10);
  PROGRESSO     INT;
  VLPROGRESSO   INT;
  ATUALIZADOS   INT;
  VLQTDREGISTRO BIGINT;
  VLCPFCNPJ     VARCHAR(14);
  VLNOMETABELA  VARCHAR(50);
  VLNOMECAMPO   VARCHAR(24);
  REC_CLIENTE_REGISTRO_PRIMITIVO   RECORD;
  REC_CLIENTE_DUPLICADO   RECORD;
  REC_CAMPO_NOME_TABELA   RECORD;
  REC_QTD_REGISTRO        RECORD;

  CUR_CLIENTE_REGRISTRO_PRIMITIVO CURSOR FOR 
  SELECT CLI.COD_CLIENTE_DESTINO, CPF_CNPJ, CLI.REGISTRO_PRIMITIVO 
  FROM BASE_PROD.CAD_CLIENTES_DUPLICADOS CLI
  WHERE CLI.REGISTRO_PRIMITIVO = TRUE
  --AND   CLI.CPF_CNPJ = '00003178536'
  ORDER BY CLI.COD_CLIENTE_DESTINO;
 
  CUR_CLIENTE_DUPLICADO CURSOR (PCPF VARCHAR(14)) FOR 
  SELECT * FROM BASE_PROD.CAD_CLIENTES_DUPLICADOS CLI
  WHERE  CLI.REGISTRO_PRIMITIVO = FALSE
  AND    CLI.CPF_CNPJ = PCPF
  ORDER  BY CLI.CPF_CNPJ, CLI.COD_CLIENTE_DESTINO;
 
  CUR_CAMPOS_NOMES_TABELAS CURSOR FOR 
  SELECT TABLE_NAME AS NOMETABELA FROM INFORMATION_SCHEMA.COLUMNS
  WHERE COLUMN_NAME LIKE '%_CDPODA006'
  AND   TABLE_NAME NOT IN('CAD_CLIENTE_PJ', 'CAD_CLIENTES_DUPLICADOS', 'CAD_CLIENTES_DUPLICADOS_CORRIGIDOS');

 BEGIN
   PROGRESSO=0;
   OPEN CUR_CLIENTE_REGRISTRO_PRIMITIVO;
   LOOP
     VLCODCLIENTEPRIMITIVO='';
     VLCPFCNPJ='';

     FETCH CUR_CLIENTE_REGRISTRO_PRIMITIVO INTO REC_CLIENTE_REGISTRO_PRIMITIVO; -- FETCH DA LINHA DO REGISTRO PRIMITIVO.
     EXIT WHEN NOT FOUND;                                                       -- EXIT WHEN NO MORE ROW TO FETCH
     VLCODCLIENTEPRIMITIVO=REC_CLIENTE_REGISTRO_PRIMITIVO.COD_CLIENTE_DESTINO;
     VLCPFCNPJ=REC_CLIENTE_REGISTRO_PRIMITIVO.CPF_CNPJ;

     OPEN CUR_CLIENTE_DUPLICADO(PCPF:=VLCPFCNPJ);
     LOOP
       FETCH CUR_CLIENTE_DUPLICADO INTO REC_CLIENTE_DUPLICADO; -- FETCH DA LINHA DO REGISTRO PRIMITIVO.
       EXIT WHEN NOT FOUND;                                    -- EXIT WHEN NO MORE ROW TO FETCH
       VLCODCLIENTEDUPLICADO=REC_CLIENTE_DUPLICADO.COD_CLIENTE_DESTINO;
      
       OPEN CUR_CAMPOS_NOMES_TABELAS;
       LOOP
         VLQTDREGISTRO=0;
         FETCH CUR_CAMPOS_NOMES_TABELAS INTO REC_CAMPO_NOME_TABELA;  --, 0000658193
         EXIT WHEN NOT FOUND;
         VLNOMETABELA=TRIM(REC_CAMPO_NOME_TABELA.NOMETABELA);
         VLNOMECAMPO='NFI_CDPODA006';
         IF VLNOMETABELA = 'CAD_PESQUISACLIENTES' THEN
           VLNOMECAMPO='COD_CLIENTE_DESTINO';
         END IF;
         EXECUTE FORMAT('SELECT COUNT(*) AS QTD_REGISTRO FROM %S WHERE %S = ''%S'';', VLNOMETABELA, VLNOMECAMPO, VLCODCLIENTEDUPLICADO) INTO VLQTDREGISTRO;
         IF VLQTDREGISTRO > 0 THEN
           EXECUTE FORMAT('UPDATE %S SET %S = ''%S'' WHERE %S = ''%S'';', VLNOMETABELA, VLNOMECAMPO, VLCODCLIENTEPRIMITIVO, VLNOMECAMPO, VLCODCLIENTEDUPLICADO);
           EXECUTE FORMAT('INSERT INTO BASE_PROD.CAD_LOG_CLIENTES_DUPLICADOS (NOME_TABELA, NOME_COLUNA, VALOR_NOVO, VALOR_ANTIGO) VALUES(''%S'', ''%S'', ''%S'', ''%S'');', VLNOMETABELA, VLNOMECAMPO, VLCODCLIENTEPRIMITIVO, VLCODCLIENTEDUPLICADO); 
           RAISE NOTICE 'ATUALIZADO TABELA: %S, CAMPO: %S, VALORATUAL: %S, VALORANTIGO: %S' , VLNOMETABELA, VLNOMECAMPO, VLCODCLIENTEPRIMITIVO, VLCODCLIENTEDUPLICADO;
           ATUALIZADOS=ATUALIZADOS+1;
           RAISE NOTICE 'TOTAL ATUALIZADO: %', ATUALIZADOS;
         END IF;
       END LOOP;
       CLOSE CUR_CAMPOS_NOMES_TABELAS;
     END LOOP;
   
     CLOSE CUR_CLIENTE_DUPLICADO; -- CLOSE THE CURSOR
     PROGRESSO=PROGRESSO+1;
     --RAISE NOTICE 'TOTAL PROCESSADO: %', PROGRESSO;
   END LOOP;
   RAISE NOTICE 'TOTAL PROCESSADO: %', PROGRESSO;
   CLOSE CUR_CLIENTE_REGRISTRO_PRIMITIVO; -- CLOSE THE CURSOR
 
END $$;
--LANGUAGE PLPGSQL;
--SELECT * FROM BASE_PROD.CAD_LOG_CLIENTES_DUPLICADOS;

--15. REALIZA A EXCLUSÃO LÓGICA (DESATIVAÇÃO DO REGISTRO) DOS REGISTROS DUPLICADOS, NA TABELA CAD_CLIENTE_PJ.
SELECT PJ.CPJ_EXCLUIDO,
  CD.REGISTRO_PRIMITIVO,
  CD.COD_CLIENTE, PJ.COD_CLIENTE,
  CD.CPJ_RAZAO_SOCIAL, PJ.CPJ_RAZAO_SOCIAL,
  CD.CPF_CNPJ, PJ.CPF_CNPJ
FROM CAD_CLIENTES_DUPLICADOS CD
JOIN CAD_CLIENTE_PJ PJ ON (CD.COD_CLIENTE = PJ.COD_CLIENTE)
AND  CD.REGISTRO_PRIMITIVO = FALSE
--AND  CD.COD_CLIENTE = 682132
ORDER BY CD.CPF_CNPJ, CD.COD_CLIENTE;

UPDATE BASE_PROD.CAD_CLIENTE_PJ
SET   CPJ_EXCLUIDO = 'S'
FROM  BASE_PROD.CAD_CLIENTES_DUPLICADOS CD 
WHERE CAD_CLIENTE_PJ.COD_CLIENTE = CD.COD_CLIENTE
AND   CD.REGISTRO_PRIMITIVO = FALSE
AND   (CD.CAD_CNF=0 AND CD.CAD_ENDERECOS_CLIENTE=0 AND CD.CAD_CRC=0 AND CAD_DCL=0);

--16. REALIZA A EXCLUSÃO FISICA DOS REGISTROS DUPLICADOS, NA TABELA CAD_CLIENTE_PJ E CAD_CLIENTE_PF
SELECT 
  CD.REGISTRO_PRIMITIVO,
  CD.COD_CLIENTE, PJ.COD_CLIENTE,
  CD.CPJ_RAZAO_SOCIAL, PJ.CPJ_RAZAO_SOCIAL,
  CD.CPF_CNPJ, PJ.CPF_CNPJ
FROM BASE_PROD.CAD_CLIENTES_DUPLICADOS CD
JOIN BASE_PROD.CAD_CLIENTE_PJ PJ ON (CD.COD_CLIENTE = PJ.COD_CLIENTE)
AND  CD.REGISTRO_PRIMITIVO = FALSE
AND   (CD.CAD_CNF=0 AND CD.CAD_ENDERECOS_CLIENTE=0 AND CD.CAD_CRC=0 AND CAD_DCL=0)
ORDER BY CD.CPF_CNPJ, CD.COD_CLIENTE

DELETE FROM BASE_PROD.CAD_CLIENTE_PJ
USING  BASE_PROD.CAD_CLIENTES_DUPLICADOS
WHERE CAD_CLIENTE_PJ.COD_CLIENTE = CAD_CLIENTES_DUPLICADOS.COD_CLIENTE
AND   CAD_CLIENTES_DUPLICADOS.REGISTRO_PRIMITIVO = FALSE
AND   (CAD_CLIENTES_DUPLICADOS.CAD_CNF=0 AND CAD_CLIENTES_DUPLICADOS.CAD_ENDERECOS_CLIENTE=0 AND CAD_CLIENTES_DUPLICADOS.CAD_CRC=0)


--17. EXCLUSÃO DAS TABELAS TEMPORARIAS, CRIADAS PARA ESSE PROCESSO
 
DROP TABLE IF EXISTS BASE_PROD.CAD_CLIENTE_PJ_DUPLICADO;
DROP TABLE IF EXISTS BASE_PROD.CAD_CLIENTES_DUPLICADOS;
DROP TABLE IF EXISTS BASE_PROD.CAD_CLIENTES_DUPLICADOS_CORRIGIDOS;
DROP TABLE IF EXISTS BASE_PROD.CAD_LOG_CLIENTES_DUPLICADOS;

